Index: src/Model/Hero/Nami.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model.Hero;\r\n\r\npublic class Nami {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/Hero/Nami.java b/src/Model/Hero/Nami.java
--- a/src/Model/Hero/Nami.java	(revision b0e4c97f9102e664f6d2ea50c21e7e4d1581ecaf)
+++ b/src/Model/Hero/Nami.java	(date 1667792693632)
@@ -1,4 +1,28 @@
 package Model.Hero;
 
-public class Nami {
+import Model.MazeCharacter;
+
+import java.util.Random;
+
+public class Nami extends Hero{
+    public Nami() {
+        super("Nami", 100, 100, 10, 10,
+                20, 0.5, 0.4, 0.20, 0);
+    }
+
+    public void specialAttack(MazeCharacter theEnemy) {
+        Random chance = new Random();
+        if (chance.nextFloat() <= getSpecialChance()) {
+            System.out.println(getName() + " used mirage tempo!");
+            if (getDodgeChance() < 0.9) {
+                setDodgeChance(getDodgeChance() + 0.1);
+                System.out.println(getName() + "'s dodge is now " + getDodgeChance() + "!");
+            } else {
+                System.out.println(getName() + "'s dodge is already at max!");
+            }
+        } else {
+            System.out.println(getName() + " failed to use mirage tempo!");
+        }
+    }
+
 }
Index: src/Model/Hero/Zoro.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model.Hero;\r\n\r\nimport Model.MazeCharacter;\r\n\r\nimport java.util.Random;\r\n\r\npublic class Zoro extends Hero{\r\n    private final int myMinSpecialDamage = 30;\r\n    private final int myMaxSpecialDamage = 50;\r\n    public Zoro(){\r\n        super(\"Zoro\", 100, 90, 8, 15, 25,\r\n                .6, .3, .4, 1);\r\n    }\r\n    @Override\r\n    public void specialAttack(MazeCharacter theEnemy){\r\n        Random chance = new Random();\r\n        Random damage = new Random();\r\n        if (chance.nextFloat() <= getSpecialChance()) {\r\n           int damageDealt = damage.nextInt(myMaxSpecialDamage + 1 - myMinSpecialDamage) + myMinSpecialDamage;\r\n            theEnemy.subtractHealth(damageDealt);\r\n            System.out.println(getName() + \" used purgatory onigiri and dealt \" + damageDealt + \" damage!\");\r\n        } else {\r\n            System.out.println(getName() + \" failed to use purgatory onigiri!\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/Hero/Zoro.java b/src/Model/Hero/Zoro.java
--- a/src/Model/Hero/Zoro.java	(revision b0e4c97f9102e664f6d2ea50c21e7e4d1581ecaf)
+++ b/src/Model/Hero/Zoro.java	(date 1667792709925)
@@ -9,7 +9,7 @@
     private final int myMaxSpecialDamage = 50;
     public Zoro(){
         super("Zoro", 100, 90, 8, 15, 25,
-                .6, .3, .4, 1);
+                .6, .2, .4, 1);
     }
     @Override
     public void specialAttack(MazeCharacter theEnemy){
Index: src/Model/Battle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\nimport Model.Enemy.*;\r\nimport Model.Hero.Chopper;\r\nimport Model.Hero.Hero;\r\nimport Model.Hero.Luffy;\r\nimport Model.Hero.Zoro;\r\n\r\nimport java.util.*;\r\n\r\npublic class Battle {\r\n    public static void main(String[] args) {\r\n        Scanner console = new Scanner(System.in);\r\n        gamePlay(console);\r\n    }\r\n\r\n    public static void gamePlay(Scanner console) {\r\n        Hero hero = chooseHero(console);\r\n        System.out.println(\"You have chosen \" + hero.getName() + \"!\");\r\n        Enemy enemy = chooseEnemy(console);\r\n        System.out.println(\"You have chosen to fight \" + enemy.getName() + \"!\");\r\n        System.out.println();\r\n        while(hero.getHealthPoints() > 0 && enemy.getHealthPoints() > 0) {\r\n            battlePhase(hero, enemy, console);\r\n        }\r\n        if (hero.getHealthPoints() <= 0){\r\n            System.out.println(hero.getName() + \" has died!\");\r\n        }else{\r\n            System.out.println(enemy.getName() + \" has died!\");\r\n        }\r\n        System.out.println();\r\n        winner(console, hero, enemy);\r\n    }\r\n    public static Hero chooseHero(Scanner console){\r\n        System.out.println(\"Choose your hero!\");\r\n        System.out.println(\"1. Luffy\");\r\n        System.out.println(\"2. Zoro\");\r\n        System.out.println(\"3: Chopper\");\r\n        int choice = console.nextInt();\r\n        if (choice == 1){\r\n            return new Luffy();\r\n        }else if (choice == 2){\r\n            return new Zoro();\r\n        } else if (choice == 3){\r\n            return new Chopper();\r\n        } else{\r\n            System.out.println(\"Invalid choice!\");\r\n            System.out.println();\r\n            return chooseHero(console);\r\n        }\r\n    }\r\n    public static Enemy chooseEnemy(Scanner console){\r\n        System.out.println(\"Choose your enemy!\");\r\n        System.out.println(\"1. BoatKevin\");\r\n        System.out.println(\"2. SadBoySea\");\r\n        System.out.println(\"3: Nikolai\");\r\n        System.out.println(\"4: Eli\");\r\n        System.out.println(\"5: Random\");\r\n        char choice = console.next().charAt(0);\r\n        if (choice == '1'){\r\n            return new BoatKevin();\r\n        }else if (choice == '2') {\r\n            return new SadBoySea();\r\n        }else if (choice == '3'){\r\n            return new Nikolai();\r\n        }else if (choice == '4'){\r\n            return new Eli();\r\n        }else if (choice == '5'){\r\n            Random random = new Random();\r\n            int randomChoice = random.nextInt(4);\r\n            if (randomChoice == 0){\r\n                return new BoatKevin();\r\n            }else if (randomChoice == 1){\r\n                return new SadBoySea();\r\n            }else if (randomChoice == 2){\r\n                return new Nikolai();\r\n            }else{\r\n                return new Eli();\r\n            }\r\n        } else{\r\n            System.out.println(\"Invalid choice!\");\r\n            System.out.println();\r\n            return chooseEnemy(console);\r\n        }\r\n    }\r\n    public static void battlePhase(Hero hero, Enemy enemy, Scanner console){\r\n        System.out.println(\"What would you like to do?\");\r\n        System.out.println(\"j. Attack\");\r\n        System.out.println(\"k. Special Attack\");\r\n        System.out.println(\"p. Use Senzu Bean\");\r\n        char choice = console.next().charAt(0);\r\n        if (choice != 'j' && choice != 'k' && choice != 'p') {\r\n            System.out.println(\"Invalid choice!\");\r\n            System.out.println();\r\n            battlePhase(hero, enemy, console);\r\n        }\r\n        if (hero.getAttackSpeed() > enemy.getAttackSpeed()) {\r\n            heroTurn(choice, hero, enemy);\r\n            System.out.println();\r\n            enemyTurn(hero, enemy);\r\n            System.out.println();\r\n        }else{\r\n            enemyTurn(hero,enemy);\r\n            System.out.println();\r\n            heroTurn(choice, hero, enemy);\r\n            System.out.println();\r\n        }\r\n        System.out.println(hero.getName() + \" : \" + hero.getHealthPoints());\r\n        System.out.println(enemy.getName() + \" : \" + enemy.getHealthPoints());\r\n        System.out.println();\r\n    }\r\n    public static void heroTurn(char choice, Hero hero, Enemy enemy) {\r\n        switch (choice){\r\n            case 'j':\r\n                hero.attack(enemy);\r\n                break;\r\n            case 'k':\r\n                hero.specialAttack(enemy);\r\n                break;\r\n            case 'p':\r\n                hero.useSenzuBean();\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static void enemyTurn(Hero hero, Enemy enemy){\r\n        Random chance = new Random();\r\n        if (chance.nextFloat() <= enemy.getSpecialChance()) {\r\n            enemy.specialAttack(hero);\r\n        } else {\r\n            enemy.attack(hero);\r\n        }\r\n    }\r\n\r\n    public static void winner(Scanner console, Hero hero, Enemy enemy) {\r\n        if (enemy.getHealthPoints() <= 0) {\r\n            System.out.println(\"Victory\");\r\n        }\r\n        if (hero.getHealthPoints() <= 0) {\r\n            System.out.println(\"Game Over\");\r\n        }\r\n        System.out.println();\r\n        restart(console);\r\n    }\r\n    public static void restart(Scanner console){\r\n        System.out.println(\"Play again? 0. no or 1. yes\");\r\n        char choice = console.next().charAt(0); // Initializes the game to start over.\r\n        if (choice == '1') {\r\n            gamePlay(console);\r\n        } else if(choice == '0'){\r\n            System.out.println(\"Thanks for playing.\");\r\n        } else{\r\n            System.out.println(\"Invalid choice!\");\r\n            System.out.println();\r\n            restart(console);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/Battle.java b/src/Model/Battle.java
--- a/src/Model/Battle.java	(revision b0e4c97f9102e664f6d2ea50c21e7e4d1581ecaf)
+++ b/src/Model/Battle.java	(date 1667792709950)
@@ -1,10 +1,7 @@
 package Model;
 
 import Model.Enemy.*;
-import Model.Hero.Chopper;
-import Model.Hero.Hero;
-import Model.Hero.Luffy;
-import Model.Hero.Zoro;
+import Model.Hero.*;
 
 import java.util.*;
 
@@ -36,6 +33,7 @@
         System.out.println("1. Luffy");
         System.out.println("2. Zoro");
         System.out.println("3: Chopper");
+        System.out.println("4: Nami");
         int choice = console.nextInt();
         if (choice == 1){
             return new Luffy();
@@ -43,6 +41,8 @@
             return new Zoro();
         } else if (choice == 3){
             return new Chopper();
+        } else if (choice == 4){
+            return new Nami();
         } else{
             System.out.println("Invalid choice!");
             System.out.println();
@@ -97,13 +97,17 @@
         if (hero.getAttackSpeed() > enemy.getAttackSpeed()) {
             heroTurn(choice, hero, enemy);
             System.out.println();
-            enemyTurn(hero, enemy);
-            System.out.println();
+            if (enemy.getHealthPoints() > 0) {
+                enemyTurn(hero, enemy);
+                System.out.println();
+            }
         }else{
             enemyTurn(hero,enemy);
             System.out.println();
-            heroTurn(choice, hero, enemy);
-            System.out.println();
+            if (hero.getHealthPoints() > 0) {
+                heroTurn(choice, hero, enemy);
+                System.out.println();
+            }
         }
         System.out.println(hero.getName() + " : " + hero.getHealthPoints());
         System.out.println(enemy.getName() + " : " + enemy.getHealthPoints());
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e4fa422e-bbf5-4b7a-ad89-3212284be1af\" name=\"Changes\" comment=\"Created maze character\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Controller/InputControls.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Controller/InputControls.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Controller/LoadGame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Controller/LoadGame.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Gy4MZ6o4ITOQnDJbnGqEnU9zzO\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e4fa422e-bbf5-4b7a-ad89-3212284be1af\" name=\"Changes\" comment=\"\" />\r\n      <created>1667347447614</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1667347447614</updated>\r\n      <workItem from=\"1667347450027\" duration=\"329000\" />\r\n      <workItem from=\"1667625190074\" duration=\"166000\" />\r\n      <workItem from=\"1667763410040\" duration=\"614000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"New Project for TCSS 360\">\r\n      <created>1667347517038</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667347517038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"New Project for TCSS 360\">\r\n      <created>1667347659818</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667347659818</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"New Project for TCSS 360\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"New Project for TCSS 360\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b0e4c97f9102e664f6d2ea50c21e7e4d1581ecaf)
+++ b/.idea/workspace.xml	(date 1667792994006)
@@ -1,11 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="e4fa422e-bbf5-4b7a-ad89-3212284be1af" name="Changes" comment="Created maze character">
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Controller/InputControls.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Controller/InputControls.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Controller/LoadGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Controller/LoadGame.java" afterDir="false" />
-    </list>
+    <list default="true" id="e4fa422e-bbf5-4b7a-ad89-3212284be1af" name="Changes" comment="" />
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -63,7 +59,14 @@
       <option name="project" value="LOCAL" />
       <updated>1667347659818</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Created nami class and worked on battle sim for a bit">
+      <created>1667792778445</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1667792778445</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -82,6 +85,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="New Project for TCSS 360" />
-    <option name="LAST_COMMIT_MESSAGE" value="New Project for TCSS 360" />
+    <MESSAGE value="Created nami class and worked on battle sim for a bit" />
+    <option name="LAST_COMMIT_MESSAGE" value="Created nami class and worked on battle sim for a bit" />
   </component>
 </project>
\ No newline at end of file
Index: src/Model/MazeCharacter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\nimport java.util.Random;\r\n\r\npublic class MazeCharacter {\r\n    private String myName;\r\n    private int myHealthPoints;\r\n    private int myAttackSpeed;\r\n    private int myMinDamage;\r\n    private int myMaxDamage;\r\n    private double myHitChance;\r\n    private double myDodgeChance;\r\n    private double mySpecialChance;\r\n\r\n    protected MazeCharacter(String theName, int theHealthPoints,  int theAttackSpeed,\r\n                            int theMinDamage, int theMaxDamage, double theHitChance, double theDodgeChance,\r\n                            double theSpecialChance) {\r\n        setName(theName);\r\n        setHealthPoints(theHealthPoints);\r\n        setAttackSpeed(theAttackSpeed);\r\n        setMinDamage(theMinDamage);\r\n        setMaxDamage(theMaxDamage);\r\n        setHitChance(theHitChance);\r\n        setDodgeChance(theDodgeChance);\r\n        setSpecialChance(theSpecialChance);\r\n    }\r\n\r\n    protected final void setName(String theName) {\r\n        myName = theName;\r\n    }\r\n\r\n    protected final void setHealthPoints(int theHealthPoints) {\r\n        myHealthPoints = theHealthPoints;\r\n    }\r\n\r\n\r\n    protected final void setAttackSpeed(int theAttackSpeed) {\r\n        myAttackSpeed = theAttackSpeed;\r\n    }\r\n\r\n    protected final void setMinDamage(int theMinDamage) {\r\n        myMinDamage = theMinDamage;\r\n    }\r\n\r\n    protected final void setMaxDamage(int theMaxDamage) {\r\n        myMaxDamage = theMaxDamage;\r\n    }\r\n\r\n    protected final void setHitChance(double theHitChance) {\r\n        myHitChance = theHitChance;\r\n    }\r\n    protected final void setDodgeChance(double theDodgeChance){\r\n        myDodgeChance = theDodgeChance;\r\n    }\r\n\r\n    protected final void setSpecialChance(double theSpecialChance) {\r\n        mySpecialChance = theSpecialChance;\r\n    }\r\n\r\n    public final String getName() {\r\n        return myName;\r\n    }\r\n\r\n    public final int getHealthPoints() {\r\n        return myHealthPoints;\r\n    }\r\n\r\n\r\n    public final int getAttackSpeed() {\r\n        return myAttackSpeed;\r\n    }\r\n    protected final double getSpecialChance() {\r\n        return mySpecialChance;\r\n    }\r\n\r\n    public final int subtractHealth(int theDamage) {\r\n        myHealthPoints -= theDamage;\r\n        if (myHealthPoints < 0){\r\n            myHealthPoints = 0;\r\n        }\r\n        return myHealthPoints;\r\n    }\r\n\r\n    public boolean blockAttack() {\r\n        Random rand = new Random();\r\n        double chance = rand.nextDouble();\r\n        return chance < myDodgeChance;\r\n    }\r\n\r\n    public final void attack(final MazeCharacter theEnemy) {\r\n        if (blockAttack()) {\r\n            System.out.println(theEnemy.getName() + \" has blocked the attack!\");\r\n        } else {\r\n            Random rand = new Random();\r\n            double chance = rand.nextDouble();\r\n            if (chance < myHitChance) {\r\n                int damage = rand.nextInt(myMaxDamage - myMinDamage + 1) + myMinDamage;\r\n                theEnemy.subtractHealth(damage);\r\n                System.out.println(myName + \" hit \" + theEnemy.getName() + \" for \" + damage + \" damage!\");\r\n                System.out.println(theEnemy.getName() + \" has \" + theEnemy.getHealthPoints() + \" health left!\");\r\n            } else {\r\n                System.out.println(myName + \" missed!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void specialAttack(final MazeCharacter theEnemy) {\r\n        Random rand = new Random();\r\n        double chance = rand.nextDouble();\r\n        if (chance <= mySpecialChance) {\r\n            int damageDealt = rand.nextInt(myMaxDamage - myMinDamage + 1) + myMinDamage;\r\n            theEnemy.subtractHealth(damageDealt);\r\n            System.out.println(myName + \" attacks \" + theEnemy.getName() + \" for \" + damageDealt + \" damage.\");\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/MazeCharacter.java b/src/Model/MazeCharacter.java
--- a/src/Model/MazeCharacter.java	(revision b0e4c97f9102e664f6d2ea50c21e7e4d1581ecaf)
+++ b/src/Model/MazeCharacter.java	(date 1667792709936)
@@ -65,10 +65,12 @@
         return myHealthPoints;
     }
 
-
     public final int getAttackSpeed() {
         return myAttackSpeed;
     }
+    public double getDodgeChance(){
+        return myDodgeChance;
+    }
     protected final double getSpecialChance() {
         return mySpecialChance;
     }
